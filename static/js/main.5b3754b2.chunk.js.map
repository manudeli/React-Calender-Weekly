{"version":3,"sources":["components/Calendar/useCalendar.ts","components/Calendar/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["daysShortArr","name","value","monthNamesArr","today","Date","useCalendar","daysShort","monthNames","useState","selectedDate","setSelectedDate","firstDayInMonth","getFullYear","getMonth","getDay","startingPoint","filter","d","console","log","prevMonthLastDate","selectedMonthLastDate","daysInMonth","getDate","calendars","prevMonthStartingPoint","month","year","i","rows","push","classes","date","getPrevMonth","prevValue","getNextMonth","Calendar","selectedStart","setSelectedStart","selectedEnd","setSelectedEnd","className","onClick","map","day","calendar","index","App","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b3754b2.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst daysShortArr = [\n  { name: '일', value: 0 },\n  { name: '월', value: 1 },\n  { name: '화', value: 2 },\n  { name: '수', value: 3 },\n  { name: '목', value: 4 },\n  { name: '금', value: 5 },\n  { name: '토', value: 6 },\n];\n\nconst monthNamesArr = [\n  '1월',\n  '2월',\n  '3월',\n  '4월',\n  '5월',\n  '6월',\n  '7월',\n  '8월',\n  '9월',\n  '10월',\n  '11월',\n  '12월',\n];\n\nconst rows = 6;\nconst cols = 7;\nconst today = new Date();\n\nconst useCalendar = (daysShort = daysShortArr, monthNames = monthNamesArr) => {\n  const [selectedDate, setSelectedDate] = useState(today);\n\n  const firstDayInMonth = new Date(\n    selectedDate.getFullYear(),\n    selectedDate.getMonth(),\n    1\n  ).getDay();\n\n  let startingPoint = daysShortArr.filter(d => d.value === firstDayInMonth)[0]\n    .value;\n\n  console.log(startingPoint);\n\n  const prevMonthLastDate = new Date(\n    selectedDate.getFullYear(),\n    selectedDate.getMonth(),\n    0\n  );\n\n  const selectedMonthLastDate = new Date(\n    selectedDate.getFullYear(),\n    selectedDate.getMonth() + 1,\n    0\n  );\n\n  const daysInMonth = selectedMonthLastDate.getDate();\n\n  const calendars = [];\n  let prevMonthStartingPoint = prevMonthLastDate.getDate() - startingPoint + 1;\n  let month = selectedDate.getMonth();\n  let year = selectedDate.getFullYear();\n\n  for (let i = 0; i < rows * cols; i++) {\n    // 지난 달 마지막일 넣기\n    if (i < startingPoint) {\n      calendars.push({\n        classes: 'prev-month',\n        date: new Date(\n          month === 0 ? year - 1 : year,\n          month === 0 ? 12 - 1 : month - 1,\n          prevMonthStartingPoint\n        ),\n      });\n      prevMonthStartingPoint++;\n    } else if (i < daysInMonth + startingPoint) {\n      calendars.push({\n        classes: '',\n        date: new Date(\n          month === 0 ? year - 1 : year,\n          month === 0 ? 12 : month,\n          i - startingPoint + 1\n        ),\n      });\n    } else {\n      calendars.push({\n        classes: 'next-month',\n        date: new Date(\n          month === 0 ? year - 1 : year,\n          month === 0 ? 12 : month,\n          i - startingPoint + 1\n        ),\n      });\n    }\n  }\n\n  console.log(calendars);\n\n  const getPrevMonth = (): void => {\n    setSelectedDate(\n      prevValue =>\n        new Date(prevValue.getFullYear(), prevValue.getMonth() - 1, 1)\n    );\n  };\n\n  const getNextMonth = (): void => {\n    setSelectedDate(\n      prevValue =>\n        new Date(prevValue.getFullYear(), prevValue.getMonth() + 1, 1)\n    );\n  };\n\n  return {\n    selectedDate,\n    daysShort,\n    monthNames,\n    getPrevMonth,\n    getNextMonth,\n    calendars,\n  };\n};\n\nexport default useCalendar;\n","import React, { Fragment, useState } from 'react';\nimport useCalendar from './useCalendar';\nimport './Calendar.scss';\n\nfunction Calendar() {\n  const {\n    selectedDate,\n    daysShort,\n    calendars,\n    monthNames,\n    getPrevMonth,\n    getNextMonth,\n  } = useCalendar();\n\n  const [selectedStart, setSelectedStart] = useState<null | Date>(null);\n  const [selectedEnd, setSelectedEnd] = useState<null | Date>(null);\n\n  const dateClickHandler = (date: Date) => {\n    if (selectedStart && !selectedEnd && !(selectedStart > date))\n      setSelectedEnd(date);\n    else {\n      setSelectedEnd(null);\n      setSelectedStart(date);\n    }\n  };\n\n  console.log(selectedStart, selectedEnd);\n\n  return (\n    <Fragment>\n      <button className=\"button\" onClick={getPrevMonth}>{`<`}</button>\n      {`${selectedDate.getFullYear()}년 ${monthNames[selectedDate.getMonth()]}`}\n      <button className=\"button\" onClick={getNextMonth}>{`>`}</button>\n      <div className=\"calendar-table-head\">\n        {daysShort.map(day => (\n          <span key={day.value}>{day.name}</span>\n        ))}\n      </div>\n      <div className=\"calendar-table\">\n        {calendars.map((calendar, index) => (\n          <div\n            className={\n              'date' +\n              ` ${\n                selectedStart &&\n                !selectedEnd &&\n                calendar.date.getFullYear() === selectedStart?.getFullYear() &&\n                calendar.date.getMonth() === selectedStart?.getMonth() &&\n                calendar.date.getDate() === selectedStart?.getDate()\n                  ? 'solo selected'\n                  : ''\n              }${\n                selectedStart &&\n                selectedEnd &&\n                selectedStart <= calendar.date &&\n                calendar.date <= selectedEnd\n                  ? ' selected'\n                  : ''\n              }${\n                calendar.date.getFullYear() === selectedStart?.getFullYear() &&\n                calendar.date.getMonth() === selectedStart?.getMonth() &&\n                calendar.date.getDate() === selectedStart?.getDate()\n                  ? ' start'\n                  : ''\n              }${\n                calendar.date.getFullYear() === selectedEnd?.getFullYear() &&\n                calendar.date.getMonth() === selectedEnd?.getMonth() &&\n                calendar.date.getDate() === selectedEnd?.getDate()\n                  ? ' end'\n                  : ''\n              }`\n            }\n            key={index}\n            onClick={() => dateClickHandler(calendar.date)}\n          >\n            <div>{calendar.date.getDate()}</div>\n          </div>\n        ))}\n      </div>\n      {selectedStart\n        ? `시작일자: ${selectedStart.getFullYear()}년 ${selectedStart.getMonth()}월 ${selectedStart.getDate()}일`\n        : ''}\n      <br />\n      {selectedEnd\n        ? `종료일자: ${selectedEnd.getFullYear()}년 ${selectedEnd.getMonth()}월 ${selectedEnd.getDate()}일`\n        : ''}\n    </Fragment>\n  );\n}\n\nexport default Calendar;\n","import React from \"react\";\nimport Calendar from \"./components/Calendar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calendar />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nexport const store = configureStore({\n  reducer: {},\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}